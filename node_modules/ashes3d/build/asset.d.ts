import { Material } from "./material/material";
import { Screen } from "./webgl2/screen";
import { Shader } from "./shader";
import { Texture } from "./texture";
export declare class Asset {
    static totalTask: number;
    static finishedTask: number;
    static addTask(): void;
    static finishTask(): void;
    static taskObserve: any;
    static loadImage(url: any): Promise<unknown>;
    static loadBufferImage(buffer: DataView, mimeType: any): Promise<unknown>;
    static adjustDataUri(root: any, uri: any): any;
    static glbMagic: number;
    static decoder: TextDecoder;
    static glbParse(path: string): Promise<{
        json: any;
        bin: any[];
    }>;
    static loadGLTF(path: string, screen: Screen, envmap?: Texture, diffmap?: Texture, shader?: any): Promise<import("./ECS/entityMgr").Entity>;
    static loadBuffer(bufferPath: any): Promise<ArrayBuffer>;
    static LoadShaderProgram(url: any): Promise<Shader>;
    static LoadMaterial(matName: any): Promise<Material>;
    static HDRParse(raw: ArrayBuffer): {
        size: any[];
        buffer: Uint8Array;
        decodeRGBE: () => {
            size: any[];
            buffer: Uint8Array;
            rgb: Float32Array;
        };
    };
    static cubemapOrder: string[];
    static loadCubeimg(folder: any, format?: string): Promise<unknown[]>;
    static loadCubemap(folder: any, format?: string): Promise<Texture>;
    static loadTexture(url: string, option: any): Promise<Texture>;
}
