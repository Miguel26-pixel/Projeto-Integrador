import { Texture, Sampler } from "./texture";
import { MeshRenderer } from "./meshRenderer";
import { Material } from "./material/material";
import { Mesh } from "./mesh/mesh";
import { Shader } from "./shader";
import { Screen } from "./webgl2/screen";
export declare class Filter {
    static sampleColor: Sampler;
    static sampleDepth: Sampler;
    ctx: WebGL2RenderingContext;
    width: number;
    height: number;
    buffer: WebGLFramebuffer;
    color: Texture[];
    input: Texture;
    output: Texture;
    depth: Texture[];
    meshRender: MeshRenderer;
    material: Material;
    mesh: Mesh;
    renderToScreen: boolean;
    screen: Screen;
    onRender: any;
    useFloatTexture: boolean;
    constructor(screen: Screen, shader: Shader, width?: number, height?: number, floatTex?: boolean);
    clone(screen?: Screen): Filter;
    setInput(tex: Texture, channel?: string): void;
    private static COLOR_ATTACH_BASE;
    private static DEPTH_ATTACHMENT;
    private static FRAMEBUFFER;
    bind(target?: WebGLFramebuffer): void;
    attachTexture(): Texture;
}
