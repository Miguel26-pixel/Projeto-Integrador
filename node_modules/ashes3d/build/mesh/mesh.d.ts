export declare class Mesh {
    attributes: Accessor[];
    indices: Accessor;
    mode: number;
    data: {};
    constructor(attributes: Accessor[], indices?: Accessor, mode?: number);
    static bindAccessorsVBO(target: Mesh, gl: WebGL2RenderingContext, locationList: any): void;
    static drawElements(target: Mesh, gl: WebGL2RenderingContext): void;
    static drawArrays(target: Mesh, gl: WebGL2RenderingContext): void;
    static drawcall(target: Mesh, gl: WebGL2RenderingContext): void;
    static preComputeNormal(mesh: Mesh): void;
    static preComputeTangent(mesh: Mesh): void;
}
export declare class Accessor {
    static types: {
        SCALAR: number;
        VEC1: number;
        VEC2: number;
        VEC3: number;
        VEC4: number;
        MAT2: number;
        MAT3: number;
        MAT4: number;
    };
    attribute: string;
    bufferView: bufferView;
    byteOffset: number;
    componentType: number;
    normalized: boolean;
    count: number;
    max: number[];
    min: number[];
    size: number;
    private _data;
    constructor({ bufferView, byteOffset, componentType, normalized, count, type, max, min }: {
        bufferView: any;
        byteOffset?: number;
        componentType: any;
        normalized?: boolean;
        count: any;
        type: any;
        max?: any[];
        min?: any[];
    }, name?: string);
    get data(): any;
    static newFloat32Array(acc: Accessor): Float32Array;
    static getSubChunks(acc: any, data: any): any[];
    static getFloat32Blocks(acc: Accessor): any[];
    static getUint16Blocks(acc: Accessor): any[];
    static newTypedArray(acc: Accessor): Float32Array | Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array;
    static getData(acc: Accessor): any[] | Float32Array | Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array;
}
export declare class bufferView {
    rawBuffer: ArrayBuffer;
    dataView: DataView;
    byteLength: number;
    byteOffset: number;
    byteStride: number;
    target: number;
    buffer: WebGLBuffer;
    constructor(rawData?: ArrayBuffer, { byteOffset, byteLength, byteStride, target }?: {
        byteOffset?: number;
        byteLength?: number;
        byteStride?: number;
        target?: number;
    });
    static updateBuffer(bView: bufferView, gl: WebGL2RenderingContext, usage?: number): void;
    static bindBuffer(bView: bufferView, gl: WebGL2RenderingContext): void;
}
